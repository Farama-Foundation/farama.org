- type: Good Science
  standards:
    - name: <b>Be fully deterministic</b> when given a specific random seed, so that any result can be exactly reproduced.
    - name: <b>Include explicit versioning</b> in environment or wrapper names in a format like "Pong-v5", to make it more explicit to researchers when results are from differently configured environments.

- type: Release Details
  standards:
    - name: <b>Be released on PyPI</b>, so that users can easily install libraries via `pip` without having to clone Git repositories
    - name: <b>Include a full package description</b> for the PyPI page (generally by repurposing the readme file), so that users can quickly see what a package is when searching through packages on PyPI.
    - name: <b>Cut releases to PyPI via GitHub actions</b> that run when cutting a release on GitHub. This ensures that releases are fully automated to remove human error, and allows anyone to easily take over a project if needed.

- type: Binaries
  standards:
    - name: <b>Be deterministically compiled</b> if we're releasing it as a binary or if it compiles on installation, to reduce the likelihood of difficult-to-track-down reproducibility issues
    - name: <b>Ship binaries for both x86_64 and Arm architectures</b> and both Linux and macOS if binaries are shipped. All supported operating systems should have wheels provided, and Arm Macs and Arm based Linux servers are becoming fairly common. Note- we're temporarily handling Arm based Mac wheels by having them compile on installation instead of releasing issues due to an issue with PyPI support.

- type: Quality of Life
  standards:
    - name: <b>Include a thorough documentation website</b> in the same format as our others, if the library is large enough to warrant one. We want both experienced researchers and newcomers alike to be able to quickly see what a library is and what it can do, as well as to be able to reference functionality as needed without having to refer to source.
    - name: <b>Run on both Linux and macOS.</b> The vast majority of the software in this field is run on Linux servers, and a huge number of researchers and students develop and test on Macs.

- type: Development Workflow
  standards:
    - name: <b>Have continuous integration testing</b> that includes API compliance testing and determinism testing, tests on both macOS and Linux, and tests with Pyright. This way we can make sure all libraries we maintain are well-tested and robust.
    - name: <b>Include a git pre-commit</b> with black, flake8 and isort. Including these in pre-commit reduces headaches for us and developers in trying to get pull requests finished and merged by making it clear to contributors that their PR needs changes to comply with their style guide before they open a pull request and the automated tests are run.

- type: Code Standardization
  standards:
    - name: <b>Have Python code comply with the black, flake8, and isort linting/formatting tools.</b> Making this style libraries standards makes it keeps the code formatting consistent across different projects and contributors of very different backgrounds.
    - name: <b>Add type hinting where reasonable</b>, at least in the most publicly facing portions of a repository. Adding type hinting to functions can help new users get accustomed to code easier and can sometimes help prevent or catch obscure bugs.
    - name: <b>Include docstrings for most functions</b> so that new people can more easily know what they do, using the pydocstyle and Google styles so that they have a standard formatting.

- type: Farama Branding
  standards:
    - name: <b>Have a logo in the same style as other projects.</b> Having nice logos for projects is a small nice feature that makes specific projects more memorable and the whole space more inviting to interested new students. Since we list all the logos together, we try to make sure they match.
    - name: <b>Have the documentation website be at ___.farama.org.</b> Having everything under a single domain name makes things simpler and consistent for users switching between multiple libraries (and makes things a bit easier for us to manage.
    - name: <b>Use the standard Farama code of conduct.</b> We believe that all members of our community should be respected, and listing a code of conduct under our projects is a requirement for certain open source donations.

- type: Standardization
  standards:
    - name: <b>Support the Gymnasium and/or PettingZoo API</b> at the newest version (supporting other APIs in addition to these are fine), so that users can drop in and try out different environments as easily as possible and code can be more modular, interchangeable, and freely exchanged.
    - name: <b>Support all current versions of Python</b> (currently 3.7-3.10). Different users often want or need to use different versions of Python, often as specified by outside forces like company policy or their package manager, and we want to comprehensively support this.

- type: Security
  standards:
    - name: <b>List Jordan Terry and Mark Towers as owners on PyPI</b>, to make sure that we don't lose control of a package in case something bad happens to a primary maintainer.
    - name: <b>Have their maintainers with GitHub or PyPI permissions use TOTP based 2FA or better</b> (and secure passwords, emails addresses, etc.), to reduce the likelihood of supply chain security attacks involving any of our projects.

- type: Other
  standards:
    - name: <b>Include Google analytics</b> in all our documentation websites, so we can see how popular they are and what users are doing on the website.
    - name: <b>Use an MIT or similarly styled open source license</b> (Apache 2.0 is fine). Listing an listed open source license is needed to properly distribute free and open source software, and we prefer MIT styled licenses as it lets users use their software in any way they'd like to and it's become what virtually all the projects in this field use.
